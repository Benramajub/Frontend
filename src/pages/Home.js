import React, { useState, useEffect } from "react";
import {
  Button,
  Container,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Snackbar,
  Alert,
  CircularProgress,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
} from "@mui/material";
import axios from "axios";

function AddFinger() {
  const [members, setMembers] = useState([]);
  const [selectedMemberId, setSelectedMemberId] = useState("");
  const [isScanning, setIsScanning] = useState(false);
  const [alert, setAlert] = useState({ open: false, message: "", severity: "info" });
  const [openDialog, setOpenDialog] = useState(false);

  useEffect(() => {
    const fetchMembers = async () => {
      try {
        const response = await axios.get(`http://localhost:5000/api/members`);
        setMembers(response.data);
      } catch (error) {
        console.error("‚ùå Error fetching members:", error);
      }
    };

    fetchMembers();

    // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î WebSocket ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    const ws = new WebSocket("wss://gym-management-m20js3uuh-benramajubs-projects.vercel.app");

    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      console.log("üì° Received WebSocket data:", data);

      if (data.status === "success") {
        setAlert({
          open: true,
          message: `‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! Fingerprint ID: ${data.fingerprintID}`,
          severity: "success",
        });

        // üî• ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå
        setMembers((prev) => prev.filter((member) => member.id !== data.memberId));
        setSelectedMemberId("");
        setIsScanning(false);
        setOpenDialog(false);
      } else if (data.status === "error") {
        setAlert({
          open: true,
          message: ` ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${data.message}`,
          severity: "error",
        });
        setIsScanning(false);
        setOpenDialog(false);
      }
    };

    return () => {
      ws.close();
    };
  }, []);

  const handleSelectMember = (event) => {
    setSelectedMemberId(event.target.value);
  };

  const handleStartScan = async () => {
    if (!selectedMemberId) {
      setAlert({ open: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô!", severity: "warning" });
      return;
    }

    setIsScanning(true);
    setOpenDialog(true);

    try {
      console.log("üîµ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏´‡πâ ESP32 ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:", selectedMemberId);
      const response = await axios.post(`http://localhost:5000/fingerprint/request_enroll`, {
        memberId: selectedMemberId,
      });

      console.log("üì° API Response:", response.data);

      if (response.data.message) {
        setAlert({ open: true, message: response.data.message, severity: "info" });
      }
    } catch (error) {
      console.error(" Error sending fingerprint enroll request:", error);
      setAlert({ open: true, message: " ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠!", severity: "error" });
      setIsScanning(false);
      setOpenDialog(false);
    }
  };

  return (
    <Container>
      <h2>‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠</h2>

      <FormControl fullWidth margin="normal">
        <InputLabel>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</InputLabel>
        <Select value={selectedMemberId} onChange={handleSelectMember}>
          {members.length > 0 ? (
            members.map((member) => (
              <MenuItem key={member.id} value={member.id}>
                {`${member.id} - ${member.firstName} ${member.lastName}`}
              </MenuItem>
            ))
          ) : (
            <MenuItem disabled>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ</MenuItem>
          )}
        </Select>
      </FormControl>

      <Button
        variant="contained"
        color="primary"
        onClick={handleStartScan}
        disabled={isScanning || members.length === 0}
        fullWidth
      >
        {isScanning ? (
          <>
            <CircularProgress size={24} style={{ marginRight: 10, color: "white" }} />
            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô...
          </>
        ) : (
          "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠"
        )}
      </Button>

      <Dialog open={openDialog} maxWidth="xs" fullWidth>
        <DialogTitle align="center">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠</DialogTitle>
        <DialogContent style={{ textAlign: "center", padding: "20px" }}>
          <CircularProgress size={50} />
          <p style={{ marginTop: "10px" }}>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô...</p>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenDialog(false)} color="secondary" disabled={isScanning}>
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </Button>
        </DialogActions>
      </Dialog>

      <Snackbar
        open={alert.open}
        autoHideDuration={4000}
        onClose={() => setAlert({ open: false, message: "", severity: "" })}
        anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
      >
        <Alert severity={alert.severity}>{alert.message}</Alert>
      </Snackbar>
    </Container>
  );
}

export default AddFinger;
